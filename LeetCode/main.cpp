#include <iostream>

using namespace std;

#include <vector>

#include "02_07.h"
#include "1.h"
#include "101.h"
#include "102.h"
#include "104.h"
#include "1047.h"
#include "105.h"
#include "106.h"
#include "107.h"
#include "108.h"
#include "110.h"
#include "111.h"
#include "112.h"
#include "113.h"
#include "1143.h"
#include "116.h"
#include "117.h"
#include "131.h"
#include "142.h"
#include "1436.h"
#include "144.h"
#include "145.h"
#include "15.h"
#include "150.h"
#include "151.h"
#include "17.h"
#include "18.h"
#include "19.h"
#include "199.h"
#include "20.h"
#include "202.h"
#include "203.h"
#include "206.h"
#include "209.h"
#include "216.h"
#include "222.h"
#include "225.h"
#include "226.h"
#include "232.h"
#include "235.h"
#include "236.h"
#include "239.h"
#include "2390.h"
#include "24.h"
#include "2414.h"
#include "242.h"
#include "257.h"
#include "27.h"
#include "2806.h"
#include "2860.h"
#include "300.h"
#include "3142.h"
#include "3153.h"
#include "3174.h"
#include "3176.h"
#include "3291.h"
#include "332.h"
#include "344.h"
#include "347.h"
#include "349.h"
#include "383.h"
#include "39.h"
#include "40.h"
#include "404.h"
#include "429.h"
#include "450.h"
#include "454.h"
#include "46.h"
#include "47.h"
#include "491.h"
#include "501.h"
#include "509.h"
#include "51.h"
#include "513.h"
#include "515.h"
#include "530.h"
#include "538.h"
#include "541.h"
#include "59.h"
#include "617.h"
#include "637.h"
#include "654.h"
#include "669.h"
#include "674.h"
#include "700.h"
#include "701.h"
#include "704.h"
#include "707.h"
#include "718.h"
#include "77.h"
#include "78.h"
#include "88.h"
#include "90.h"
#include "93.h"
#include "94.h"
#include "977.h"
#include "98.h"
#include "Bian_Li.h"
#include "kama_54.h"
#include "kama_55.h"

using namespace std;

void call_Bian_Li() {}

void call_2414() {
  Solution_2414 test;
  string v_1 = "abcde";
  test.longestContinuousSubstring(v_1);
}

void call_1143() {
  Solution_1143 test;
  string v_1 = "ezupkr";
  string v_2 = "ubmrapg";
  test.longestCommonSubsequence(v_1, v_2);
}

void call_718() {
  Solution_718 test;
  vector<int> v_1 = {1, 2, 3, 2, 1};
  vector<int> v_2 = {3, 2, 1, 4, 7};
  test.findLength(v_1, v_2);
}

void call_509() {
  Solution_509 test;
  test.fib(10);
}

void call_2860() {
  Solution_2860 test;
  vector<int> stu_1{1, 1};
  vector<int> stu_2{9,  48, 57, 45, 21, 8,  60, 36, 11, 54, 13, 58, 77, 51, 28,
                    37, 20, 38, 33, 38, 53, 70, 66, 9,  48, 59, 35, 56, 44, 54,
                    10, 70, 58, 32, 12, 64, 65, 13, 45, 85, 59, 55, 29, 76, 72,
                    57, 89, 46, 10, 42, 34, 44, 80, 41, 87, 61, 30, 49, 50, 63,
                    65, 76, 43, 1,  52, 54, 36, 87, 55, 88, 86, 81, 67, 26, 87,
                    88, 38, 88, 45, 9,  34, 25, 12, 34, 29, 82, 59, 80, 87, 73};
  test.countWays(stu_1);
}

void call_491() {
  Solution_491 test;
  vector<int> path{4, 4, 3, 2, 1};
  test.findSubsequences(path);
}

void call_77() {
  Solution_77 test;
  test.combine(2, 1);
}

void call_101() {
  Solution_101 test;

  Solution_101::TreeNode t4(3);
  Solution_101::TreeNode t5(3);
  Solution_101::TreeNode t2(2, nullptr, &t5);
  Solution_101::TreeNode t3(2, nullptr, &t4);
  Solution_101::TreeNode t(1, &t2, &t3);
  bool res = test.isSymmetric(&t);
  std::cout << res << ", ";

  std::cout << std::endl;
}

void call_102() {
  Solution_102 test;

  Solution_102::TreeNode t2(9);
  Solution_102::TreeNode t4(15);
  Solution_102::TreeNode t5(7);
  Solution_102::TreeNode t3(20, &t4, &t5);
  Solution_102::TreeNode t(3, &t2, &t3);
  vector<vector<int>> res = test.levelOrder_di_gui(&t);
  for (auto& row : res) {
    for (auto col : row) std::cout << col << ", ";
  }
  std::cout << std::endl;
}

void call_515() {
  Solution_515 test;

  Solution_515::TreeNode t4(5);
  Solution_515::TreeNode t6(3);
  Solution_515::TreeNode t2(3, &t4, &t6);
  Solution_515::TreeNode t5(9);
  Solution_515::TreeNode t3(2, nullptr, &t5);
  Solution_515::TreeNode t(1, &t2, &t3);
  vector<int> res = test.largestValues(&t);
  for (auto& row : res) {
    std::cout << row << ", ";
  }
  std::cout << std::endl;
}

void call_107() {
  Solution_107 test;

  Solution_107::TreeNode t2(9);
  Solution_107::TreeNode t4(15);
  Solution_107::TreeNode t5(7);
  Solution_107::TreeNode t3(20, &t4, &t5);
  Solution_107::TreeNode t(3, &t2, &t3);
  vector<vector<int>> res = test.levelOrderBottom(&t);
  for (auto& row : res) {
    for (auto col : row) std::cout << col << ", ";
    std::cout << std::endl;
  }
  std::cout << std::endl;
}

void call_704() {
  Solution s;
  vector<int> test{-1, 0, 3, 5, 9, 12};
  int t = s.search(test, 9);
  std::cout << "res:" << t << std::endl;

  vector<int> test_2{-1, 0, 3, 5, 9, 12};
  t = s.search_two_part(test_2, 2);
  std::cout << "res:" << t << std::endl;
}

void call_707() {
  cout << "res: ";
  MyLinkedList* myLinkedList = new MyLinkedList();
  myLinkedList->addAtHead(1);
  myLinkedList->addAtTail(3);
  myLinkedList->addAtIndex(1, 2);        // 链表变为 1->2->3
  cout << myLinkedList->get(1) << ", ";  // 返回 2
  myLinkedList->deleteAtIndex(1);        // 现在，链表变为 1->3
  cout << myLinkedList->get(1);          // 返回 3
  cout << endl;
}

void call_206() {
  MyLinkedList* myLinkedList = new MyLinkedList();
  myLinkedList->addAtHead(1);
  myLinkedList->addAtHead(2);
  myLinkedList->addAtHead(3);
  myLinkedList->addAtHead(4);
  myLinkedList->addAtHead(5);
}

void call_383() {
  string a = "aa";
  string b = "aab";
  Solution_383 test;
  test.canConstruct(a, b);
}

void call_kama_54() {
  string s = "a1b2c3";
  Solution_kama_54 test;
  cout << test.replaceNumber(s) << endl;
  cout << test.replaceNumber_double_pionts(s) << endl;
}

void call_kama_55() {
  Solution_kama_55 test;
  string s = "abcdefg";
  string res = test.stringRightReplace(s, 2);
  cout << res << endl;
}

void call_27() {}

void call_347() {
  Solution_347 test;
  vector<int> s{1, 1, 1, 2, 2, 3};
  vector<int> res = test.topKFrequent(s, 2);
  for (auto i : res) {
    cout << i << ", ";
  }
  cout << endl;
}

void call_239() {
  Solution_239 test;
  vector<int> s{1, -1};
  vector<int> res = test.maxSlidingWindow(s, 1);
  for (auto i : res) {
    cout << i << ", ";
  }
  cout << endl;
}

void call_20() {
  Solution_20 test;
  string s = "()[]{}";
  std::cout << "res: " << test.isValid(s) << std::endl;
}

void call_151() {
  Solution_151 test;
  string s = "the sky is blue";
  std::cout << "res: " << test.reverseWords(s) << std::endl;

  string s2 = "  hello world  ";
  std::cout << "res: " << test.reverseWords(s2) << std::endl;
}

void call_977() {
  Solution_977 s;
  vector<int> test{-4, -1, 0, 3, 10};
  vector<int> t = s.sortedSquares_double_points(test);
  std::cout << "res:";
  for (auto i : t) {
    std::cout << i << ", ";
  }
  std::cout << std::endl;

  vector<int> test_2{-50, -50, -43, -41, -37, -37, -36, -36, -28, -28,
                     -28, -27, -19, -16, -16, -14, -14, -13, -13, -12,
                     -12, -10, -7,  -3,  -2,  -1,  0,   0,   1,   6,
                     6,   6,   7,   16,  19,  24,  26,  26,  28,  31,
                     33,  34,  37,  37,  38,  38,  42,  44,  44,  45};
  vector<int> t_2 = s.sortedSquares(test_2);
  std::cout << "res:";
  for (auto i : t_2) {
    std::cout << i << ", ";
  }
  std::cout << std::endl;
}

#include <algorithm>
#include <iostream>
#include <tuple>
#include <vector>

int main() {
  // call_977();

  // call_707();
  // call_383();
  // call_kama_54();
  // call_151();
  // call_kama_55();
  // call_20();
  // call_239();
  // call_347();
  // call_102();
  // call_107();
  // call_515();
  // call_101();
  // call_77();
  // call_491();
  // call_2860();
  // call_509();
  // call_718();
  // call_1143();
  // call_2414();
  cout << "Hello World!" << endl;

#if 1
  // 示例数组
  std::vector<int> a = {
      0,   1,   10,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 11,  110,
      111, 112, 113, 114, 115, 116, 117, 118, 119, 12,  120, 121, 122, 123, 124,
      125, 126, 127, 128, 129, 13,  130, 131, 132, 133, 134, 135, 136, 137, 138,
      139, 14,  140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 15,  150, 151,
      152, 153, 154, 155, 156, 157, 158, 159, 16,  160, 161, 162, 163, 164, 165,
      166, 167, 168, 169, 17,  170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
      18,  180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 19,  190, 191, 192,
      193, 194, 195, 196, 197, 198, 199, 2,   20,  200, 201, 202, 203, 204, 205,
      206, 207, 208, 209, 21,  210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
      22,  220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 23,  230, 231, 232,
      233, 234, 235, 236, 237, 238, 239, 24,  240, 241, 242, 243, 244, 245, 246,
      247, 248, 249, 25,  250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 26,
      260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 27,  270, 271, 272, 273,
      274, 275, 276, 277, 278, 279, 28,  280, 281, 282, 283, 284, 285, 286, 287,
      288, 289, 29,  290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 3,   30,
      300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 31,  310, 311, 312, 313,
      314, 315, 316, 317, 318, 319, 32,  320, 321, 322, 323, 324, 325, 326, 327,
      328, 329, 33,  330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 34,  340,
      341, 342, 343, 344, 345, 346, 347, 348, 349, 35,  350, 351, 352, 353, 354,
      355, 356, 357, 358, 359, 36,  360, 361, 362, 363, 364, 365, 366, 367, 368,
      369, 37,  370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 38,  380, 381,
      382, 383, 384, 385, 386, 387, 388, 389, 39,  390, 391, 392, 393, 394, 395,
      396, 397, 398, 399, 4,   40,  400, 401, 402, 403, 404, 405, 406, 407, 408,
      409, 41,  410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 42,  420, 421,
      422, 423, 424, 425, 426, 427, 428, 429, 43,  430, 431, 432, 433, 434, 435,
      436, 437, 438, 439, 44,  440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
      45,  450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 46,  460, 461, 462,
      463, 464, 465, 466, 467, 468, 469, 47,  470, 471, 472, 473, 474, 475, 476,
      477, 478, 479, 48,  480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 49,
      490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 5,   50,  500, 501, 502,
      503, 504, 505, 506, 507, 508, 509, 51,  510, 511, 512, 513, 514, 515, 516,
      517, 518, 519, 52,  520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 53,
      530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 54,  540, 541, 542, 543,
      544, 545, 546, 547, 548, 549, 55,  550, 551, 552, 553, 554, 555, 556, 557,
      558, 559, 56,  560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 57,  570,
      571, 572, 573, 574, 575, 576, 577, 578, 579, 58,  580, 581, 582, 583, 584,
      585, 586, 587, 588, 589, 59,  590, 591, 592, 593, 594, 595, 596, 597, 598,
      599, 6,   60,  600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 61,  610,
      611, 612, 613, 614, 615, 616, 617, 618, 619, 62,  620, 621, 622, 623, 624,
      625, 626, 627, 628, 629, 63,  630, 631, 632, 633, 634, 635, 636, 637, 638,
      639, 64,  640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 65,  650, 651,
      652, 653, 654, 655, 656, 657, 658, 659, 66,  660, 661, 662, 663, 664, 665,
      666, 667, 668, 669, 67,  670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
      68,  680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 69,  690, 691, 692,
      693, 694, 695, 696, 697, 698, 699, 7,   70,  700, 701, 702, 703, 704, 705,
      706, 707, 708, 709, 71,  710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
      72,  720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 73,  730, 731, 732,
      733, 734, 735, 736, 737, 738, 739, 74,  740, 741, 742, 743, 744, 745, 746,
      747, 748, 749, 75,  750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 76,
      760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 77,  770, 771, 772, 773,
      774, 775, 776, 777, 778, 779, 78,  780, 79,  8,   80,  81,  82,  83,  84,
      85,  86,  87,  88,  89,  9,   90,  91,  92,  93,  94,  95,  96,  97,  98,
      99};
  std::vector<double> b = {
      0,     0,     0,     80.79, 80.62, 80.22, 80.39, 80.33, 80.23, 80.65,
      80.79, 80.72, 80.87, 0,     80.89, 80.68, 80.65, 80.58, 80.58, 80.59,
      80.54, 80.51, 80.44, 80.43, 0,     80.46, 80.5,  80.31, 79.93, 79.95,
      80.03, 80.21, 80.26, 80.11, 80.03, 0,     80.01, 80.03, 80.07, 80.13,
      79.95, 79.94, 80.2,  80.12, 80.22, 80.21, 0,     80.33, 80.07, 79.49,
      79.47, 79.31, 79.32, 79.45, 79.74, 79.93, 79.85, 0,     80,    79.95,
      79.85, 79.85, 79.83, 79.72, 79.6,  79.29, 79.53, 79.35, 0,     79.5,
      79.55, 79.14, 78.87, 78.69, 78.83, 79.05, 79.09, 79.18, 79.21, 0,
      79.14, 79.13, 79.18, 79.17, 79.22, 79.16, 79.14, 79.34, 79.28, 79.21,
      0,     78.94, 79.08, 78.62, 78.5,  78.27, 78.12, 78.3,  78.56, 78.67,
      78.77, 0,     78.96, 78.68, 78.67, 78.69, 78.66, 78.62, 78.62, 78.35,
      78.29, 78.32, 0,     0,     78.33, 78.46, 78.45, 78,    77.74, 77.64,
      77.92, 78.04, 78.37, 78.18, 0,     78.16, 78.11, 78.02, 78.1,  78.05,
      78.21, 77.93, 77.87, 77.95, 78.01, 0,     77.88, 77.88, 77.83, 77.23,
      77.07, 76.99, 76.94, 77.38, 77.59, 77.94, 0,     78.04, 77.95, 77.72,
      77.78, 77.79, 77.51, 77.66, 77.75, 77.67, 77.69, 0,     77.56, 77.58,
      77.47, 77.12, 76.84, 76.65, 76.78, 77.13, 77.3,  77.36, 2.5,   77.18,
      77.07, 77.18, 77.01, 77.06, 76.9,  77.1,  77.1,  77.03, 76.92, 5.82,
      76.9,  77.05, 77.02, 76.45, 76.24, 76.05, 76.2,  76.32, 76.75, 76.88,
      10.05, 76.65, 76.71, 76.8,  76.66, 76.58, 76.7,  76.55, 76.57, 76.51,
      76.74, 14.53, 76.79, 76.62, 76.59, 76.53, 76.21, 75.99, 75.75, 76.17,
      76.16, 76.26, 19.58, 76.44, 76.2,  76.17, 76.41, 76.35, 76.23, 76.31,
      76.13, 76.22, 76.08, 0,     24.94, 75.97, 76.17, 76.1,  75.89, 75.45,
      75.41, 75.3,  75.18, 75.42, 75.55, 30.23, 75.71, 75.59, 75.62, 75.54,
      75.66, 75.62, 75.52, 75.5,  75.43, 75.57, 34.66, 75.62, 75.63, 75.58,
      75.37, 75.24, 74.9,  74.69, 74.75, 75.14, 75.44, 38.13, 75.48, 75.32,
      75.13, 75.16, 75.17, 75.2,  75.16, 75.2,  75.15, 75.04, 44.64, 74.93,
      74.92, 75.01, 74.84, 74.41, 74.39, 74.16, 74.39, 74.27, 74.53, 53.9,
      74.63, 74.84, 74.87, 74.57, 74.62, 74.64, 74.57, 74.82, 74.73, 74.53,
      63.44, 74.48, 74.45, 74.43, 74.41, 74.32, 73.98, 73.66, 73.58, 73.84,
      74.31, 72.47, 74.28, 74.41, 74.39, 74.43, 74.35, 74.28, 74.21, 74.3,
      74.18, 74.16, 78.58, 74.03, 73.94, 73.88, 73.9,  73.69, 73.42, 73.27,
      73.37, 73.44, 73.46, 80.82, 73.61, 73.89, 73.74, 73.82, 73.79, 73.67,
      73.71, 73.71, 73.58, 73.59, 0,     81.51, 73.52, 73.58, 73.54, 73.58,
      73.52, 73.24, 73.05, 72.94, 72.94, 73.33, 82.7,  73.28, 73.27, 73.38,
      73.21, 73.25, 73.43, 73.26, 73.11, 73.18, 73.22, 83.01, 73.22, 73.24,
      73.05, 72.97, 73.14, 72.75, 72.44, 72.52, 72.43, 72.52, 82.75, 72.85,
      73.14, 73.01, 73.1,  73.05, 72.99, 72.8,  72.76, 72.79, 72.85, 82.83,
      72.93, 72.64, 72.57, 72.56, 72.65, 72.55, 71.97, 72.09, 72.08, 72.17,
      82.33, 72.34, 72.67, 72.57, 72.27, 72.34, 72.29, 72.41, 72.22, 72.2,
      72.3,  81.65, 72.56, 72.39, 72.28, 72.23, 72.34, 72.08, 71.85, 71.55,
      71.46, 71.48, 81.54, 71.91, 72.1,  72.03, 72.05, 72.12, 72,    71.92,
      71.81, 71.72, 71.77, 81.56, 71.95, 71.79, 71.64, 71.72, 71.8,  71.77,
      71.24, 70.85, 70.71, 70.89, 81.75, 71.31, 71.5,  71.44, 71.45, 71.29,
      71.45, 71.44, 71.39, 71.16, 71.29, 0,     81.83, 71.14, 71.25, 71.08,
      71.14, 71.15, 70.97, 70.49, 70.31, 70.35, 70.27, 82.05, 70.58, 70.74,
      70.83, 70.75, 70.69, 70.67, 70.77, 70.55, 70.5,  70.76, 82.29, 70.73,
      70.69, 70.5,  70.67, 70.66, 70.36, 70.41, 70,    69.92, 69.86, 82.44,
      70.11, 70.17, 70.2,  70.31, 70.07, 70.12, 70.13, 70.08, 70.21, 70.2,
      82.46, 70.17, 70.25, 70.19, 69.86, 69.96, 69.91, 69.37, 69.12, 68.99,
      68.98, 82.31, 68.97, 69.56, 69.55, 69.66, 69.46, 69.54, 69.52, 69.55,
      69.47, 69.45, 82.35, 69.48, 69.5,  69.6,  69.43, 69.53, 69.5,  69.28,
      68.85, 68.87, 68.79, 82.19, 68.89, 68.96, 68.96, 69.13, 69.14, 69.17,
      69.15, 69.15, 69.08, 68.86, 82.07, 68.8,  68.79, 68.81, 69.03, 68.95,
      68.69, 68.53, 68.17, 68.12, 67.93, 81.94, 67.89, 68.13, 68.29, 68.33,
      68.46, 68.56, 68.63, 68.6,  68.51, 68.49, 0,     81.91, 68.21, 68.14,
      68.15, 68.25, 68.14, 68.08, 68.2,  68,    67.8,  67.49, 81.29, 67.34,
      67.77, 67.97, 67.9,  68.08, 67.97, 68.06, 67.84, 68.05, 67.93, 81.32,
      68,    67.88, 67.76, 67.99, 67.94, 67.66, 67.63, 67.22, 67.08, 67.03,
      81.17, 66.91, 66.94, 67.39, 67.42, 67.58, 67.52, 67.35, 67.38, 67.38,
      67.63, 81.1,  67.53, 67.58, 67.54, 67.51, 67.53, 67.23, 67.21, 67.17,
      66.86, 66.76, 81.49, 66.69, 66.81, 67.16, 67.2,  67.27, 67.16, 67.01,
      67.05, 66.95, 67.02, 81.64, 67.06, 67.15, 67.24, 66.92, 66.93, 67.09,
      67.1,  66.7,  66.29, 66.22, 81.57, 66.21, 66.06, 66.27, 66.44, 66.4,
      66.4,  66.39, 66.52, 66.64, 66.8,  81.65, 66.81, 66.68, 66.72, 66.52,
      66.59, 66.62, 66.57, 66.27, 66.09, 65.92, 81.65, 65.76, 65.69, 66.07,
      66.3,  66.3,  66.38, 66.4,  66.42, 66.46, 66.27, 0,     81.65, 66.33,
      66.33, 66.24, 66.37, 66.37, 66.24, 66.27, 66.37, 66.01, 65.67, 81.92,
      65.66, 65.46, 65.58, 66.08, 66.29, 66.11, 65.49, 63.74, 61.93, 60.1,
      81.88, 58.59, 57.63, 57.47, 57.34, 57.02, 56.9,  56.84, 56.94, 56.7,
      56.42, 81.65, 56.33, 56.45, 56.49, 56.71, 56.39, 55.31, 53.36, 49.52,
      43.35, 36.85, 81.62, 31.31, 27.41, 24.98, 23.93, 23.5,  23.32, 23.28,
      23.23, 23.2,  22.96, 81.62, 23,    22.93, 22.91, 22.96, 23.14, 23.09,
      23.08, 23.14, 23.09, 22.98, 81.66, 22.99, 22.96, 22.99, 22.92, 23.1,
      23.08, 23.03, 22.81, 23,    22.89, 81.69, 22.7,  22.71, 22.7,  22.83,
      22.8,  22.95, 22.77, 22.78, 22.95, 22.96, 81.65, 22.8,  81.62, 0,
      81.54, 81.15, 80.78, 80.78, 80.57, 80.89, 81.1,  81.24, 81.22, 81.29,
      0,     81.25, 81.33, 81.27, 81.26, 81.23, 81.16, 81.16, 81.21, 80.97,
      80.91};
  std::vector<double> c = {
      0,     0,     0,     3.1,   3.19,  3.23,  3.27,  3.31,  3.35,  3.39,
      3.43,  3.47,  3.51,  0,     3.6,   3.64,  3.68,  3.72,  3.76,  3.8,
      3.84,  3.88,  3.92,  4,     0,     4.05,  4.09,  4.13,  4.17,  4.21,
      4.25,  4.29,  4.37,  4.41,  4.45,  0,     4.5,   4.54,  4.58,  4.62,
      4.66,  4.7,   4.78,  4.82,  4.86,  4.9,   0,     4.94,  4.98,  5.03,
      5.07,  5.11,  5.19,  5.23,  5.27,  5.31,  5.35,  0,     5.39,  5.43,
      5.47,  5.55,  5.59,  5.63,  5.67,  5.71,  5.75,  5.79,  0,     5.83,
      5.88,  5.96,  6,     6.04,  6.08,  6.12,  6.16,  6.2,   6.24,  0,
      6.28,  6.36,  6.4,   6.44,  6.48,  6.52,  6.56,  6.6,   6.64,  6.68,
      0,     6.76,  6.8,   6.84,  6.88,  6.92,  6.96,  7,     7.04,  7.08,
      7.16,  0,     7.2,   7.24,  7.28,  7.32,  7.36,  7.4,   7.44,  7.48,
      7.56,  7.6,   0,     0,     7.64,  7.68,  7.72,  7.76,  7.8,   7.84,
      7.88,  7.96,  8,     8.04,  0,     8.08,  8.12,  8.16,  8.2,   8.24,
      8.31,  8.36,  8.39,  8.43,  8.47,  0,     8.51,  8.55,  8.59,  8.63,
      8.71,  8.75,  8.79,  8.83,  8.87,  8.91,  0,     8.95,  8.99,  9.07,
      9.11,  9.14,  9.19,  9.22,  9.26,  9.3,   9.34,  0,     9.38,  9.46,
      9.5,   9.54,  9.58,  9.62,  9.66,  9.7,   9.73,  9.78,  0,     9.85,
      9.89,  9.93,  9.97,  10.01, 10.05, 10.09, 10.13, 10.21, 10.24, 0,
      10.28, 10.32, 10.36, 10.4,  10.44, 10.48, 10.52, 10.6,  10.63, 10.67,
      0.01,  10.71, 10.75, 10.79, 10.83, 10.87, 10.91, 10.99, 11.03, 11.06,
      11.1,  0.01,  11.14, 11.18, 11.22, 11.26, 11.34, 11.38, 11.41, 11.45,
      11.49, 11.53, 0.02,  11.57, 11.61, 11.65, 11.72, 11.76, 11.8,  11.84,
      11.88, 11.92, 11.96, 0,     0.04,  11.99, 12.07, 12.11, 12.15, 12.19,
      12.23, 12.26, 12.3,  12.34, 12.38, 0.06,  12.46, 12.49, 12.53, 12.57,
      12.61, 12.65, 12.69, 12.73, 12.76, 12.84, 0.07,  12.88, 12.92, 12.96,
      12.99, 13.03, 13.07, 13.11, 13.15, 13.22, 13.26, 0.09,  13.3,  13.34,
      13.38, 13.41, 13.45, 13.49, 13.53, 13.61, 13.64, 13.68, 0.12,  13.72,
      13.76, 13.8,  13.83, 13.87, 13.95, 13.99, 14.02, 14.06, 14.1,  0.14,
      14.14, 14.18, 14.21, 14.25, 14.33, 14.37, 14.4,  14.44, 14.48, 14.52,
      0.17,  14.56, 14.59, 14.67, 14.71, 14.74, 14.78, 14.82, 14.86, 14.89,
      14.93, 0.2,   14.97, 15.05, 15.08, 15.12, 15.16, 15.2,  15.23, 15.27,
      15.31, 15.35, 0.24,  15.42, 15.46, 15.5,  15.54, 15.57, 15.61, 15.65,
      15.69, 15.76, 15.8,  0.32,  15.84, 15.87, 15.91, 15.95, 15.99, 16.02,
      16.06, 16.14, 16.17, 16.21, 0,     0.36,  16.25, 16.29, 16.32, 16.36,
      16.4,  16.43, 16.51, 16.55, 16.58, 16.62, 0.4,   16.66, 16.7,  16.73,
      16.77, 16.81, 16.88, 16.92, 16.96, 16.99, 17.03, 0.45,  17.07, 17.11,
      17.14, 17.18, 17.25, 17.29, 17.33, 17.36, 17.4,  17.44, 0.49,  17.48,
      17.51, 17.59, 17.62, 17.66, 17.7,  17.73, 17.77, 17.81, 17.85, 0.53,
      17.88, 17.96, 17.99, 18.03, 18.07, 18.11, 18.14, 18.18, 18.21, 18.29,
      0.57,  18.32, 18.36, 18.4,  18.44, 18.47, 18.51, 18.55, 18.58, 18.66,
      18.69, 0.61,  18.73, 18.77, 18.8,  18.84, 18.88, 18.91, 18.95, 19.02,
      19.06, 19.1,  0.66,  19.13, 19.17, 19.21, 19.24, 19.28, 19.32, 19.39,
      19.43, 19.46, 19.5,  0.74,  19.54, 19.57, 19.61, 19.64, 19.72, 19.75,
      19.79, 19.83, 19.86, 19.9,  0.78,  19.93, 19.97, 20.01, 20.08, 20.12,
      20.15, 20.19, 20.23, 20.26, 20.3,  0,     0.82,  20.33, 20.37, 20.44,
      20.48, 20.52, 20.55, 20.59, 20.62, 20.66, 20.69, 0.86,  20.77, 20.8,
      20.84, 20.87, 20.91, 20.95, 20.98, 21.02, 21.05, 21.12, 0.91,  21.16,
      21.2,  21.23, 21.27, 21.3,  21.34, 21.38, 21.41, 21.48, 21.52, 0.95,
      21.55, 21.59, 21.63, 21.66, 21.7,  21.73, 21.77, 21.84, 21.88, 21.91,
      0.99,  21.95, 21.98, 22.02, 22.05, 22.09, 22.16, 22.2,  22.23, 22.27,
      22.3,  1.03,  22.34, 22.37, 22.41, 22.44, 22.51, 22.55, 22.59, 22.62,
      22.66, 22.69, 1.07,  22.73, 22.76, 22.83, 22.87, 22.9,  22.94, 22.97,
      23.01, 23.04, 23.08, 1.16,  23.11, 23.18, 23.22, 23.25, 23.29, 23.32,
      23.36, 23.39, 23.43, 23.5,  1.2,   23.53, 23.57, 23.6,  23.64, 23.68,
      23.71, 23.74, 23.78, 23.85, 23.88, 1.24,  23.92, 23.95, 23.99, 24.02,
      24.06, 24.09, 24.13, 24.2,  24.23, 24.27, 0,     1.28,  24.3,  24.34,
      24.37, 24.41, 24.44, 24.47, 24.54, 24.58, 24.61, 24.65, 1.32,  24.68,
      24.71, 24.75, 24.79, 24.85, 24.89, 24.92, 24.96, 24.99, 25.03, 1.36,
      25.06, 25.09, 25.13, 25.2,  25.23, 25.27, 25.3,  25.34, 25.37, 25.41,
      1.41,  25.44, 25.51, 25.54, 25.58, 25.61, 25.64, 25.68, 25.71, 25.75,
      25.78, 1.45,  25.85, 25.89, 25.92, 25.95, 25.99, 26.02, 26.06, 26.09,
      26.16, 26.19, 1.49,  26.23, 26.26, 26.3,  26.33, 26.36, 26.4,  26.43,
      26.5,  26.53, 26.57, 1.57,  26.6,  26.64, 26.67, 26.7,  26.74, 26.77,
      26.84, 26.88, 26.91, 26.94, 1.61,  26.98, 27.01, 27.04, 27.08, 27.11,
      27.18, 27.21, 27.25, 27.28, 27.31, 1.66,  27.35, 27.38, 27.42, 27.48,
      27.52, 27.55, 27.59, 27.62, 27.65, 27.69, 1.7,   27.72, 27.75, 27.82,
      27.85, 27.89, 27.92, 27.95, 27.99, 28.02, 28.06, 0,     1.74,  28.09,
      28.16, 28.19, 28.23, 28.26, 28.29, 28.33, 28.36, 28.39, 28.46, 1.78,
      28.49, 28.53, 28.56, 28.59, 28.63, 28.66, 28.7,  28.73, 28.79, 28.82,
      1.82,  28.85, 28.88, 28.91, 28.94, 28.97, 29,    29.03, 29.09, 29.11,
      29.14, 1.86,  29.17, 29.2,  29.23, 29.26, 29.29, 29.34, 29.37, 29.4,
      29.42, 29.44, 1.91,  29.46, 29.47, 29.49, 29.5,  29.52, 29.54, 29.55,
      29.56, 29.57, 29.58, 1.99,  29.59, 29.61, 29.63, 29.64, 29.65, 29.66,
      29.68, 29.69, 29.7,  29.71, 2.03,  29.72, 29.75, 29.76, 29.77, 29.78,
      29.79, 29.8,  29.82, 29.83, 29.84, 2.07,  29.86, 29.87, 29.89, 29.9,
      29.91, 29.92, 29.93, 29.94, 29.95, 29.98, 2.11,  29.99, 2.15,  0,
      2.19,  2.24,  2.28,  2.36,  2.4,   2.44,  2.48,  2.52,  2.57,  2.61,
      0,     2.65,  2.69,  2.77,  2.81,  2.86,  2.9,   2.94,  2.98,  3.02,
      3.06};

  std::cout << "a: " << a.size() << std::endl;
  std::cout << "b: " << b.size() << std::endl;
  std::cout << "c: " << c.size() << std::endl;

  // 创建一个元组的向量
  std::vector<std::tuple<int, double, double>> combined;
  for (size_t i = 0; i < a.size(); ++i) {
    combined.emplace_back(a[i], b[i], c[i]);
  }

  // 排序，依据元组的第一个元素（即 a 数组）
  std::sort(combined.begin(), combined.end(),
            [](const auto& lhs, const auto& rhs) {
              return std::get<0>(lhs) < std::get<0>(rhs);
            });

  // 解压排序后的结果
  for (size_t i = 0; i < combined.size(); ++i) {
    a[i] = std::get<0>(combined[i]);
    b[i] = std::get<1>(combined[i]);
    c[i] = std::get<2>(combined[i]);
  }

  // 输出排序后的数组
  std::cout << "a: ";
  for (const auto& val : a) std::cout << val << ",";
  std::cout << "\nb: ";
  for (const auto& val : b) std::cout << val << ",";
  std::cout << "\nc: ";
  for (const auto& val : c) std::cout << val << ",";
  std::cout << std::endl;

#endif

  return 0;
}
